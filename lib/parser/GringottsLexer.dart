// Generated from Gringotts.g4 by ANTLR 4.10.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class GringottsLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.10.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_T__12 = 13, TOKEN_DIGIT = 14, 
    TOKEN_YEAR = 15, TOKEN_MONTH = 16, TOKEN_DAY = 17, TOKEN_DATE = 18, 
    TOKEN_NUMBER = 19, TOKEN_TAG = 20, TOKEN_WORD = 21, TOKEN_WHITESPACE = 22, 
    TOKEN_NEWLINE = 23, TOKEN_TR_FLAG = 24, TOKEN_STR = 25;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'T__12', 'DIGIT', 'YEAR', 'MONTH', 'DAY', 
    'DATE', 'NUMBER', 'TAG', 'WORD', 'WHITESPACE', 'NEWLINE', 'TR_FLAG', 
    'STR'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "':'", "'include'", "'option'", "'#'", "';'", "'balance'", "'close'", 
      "'open'", "'commodity'", "'price'", "'event'", "'document'", "'note'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, null, "DIGIT", "YEAR", "MONTH", "DAY", "DATE", "NUMBER", 
      "TAG", "WORD", "WHITESPACE", "NEWLINE", "TR_FLAG", "STR"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  GringottsLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'Gringotts.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,25,199,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,1,1,1,1,1,
      1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
      1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
      7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
      1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
      11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,
      1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
      18,3,18,148,8,18,1,18,4,18,151,8,18,11,18,12,18,152,1,18,1,18,4,18,
      157,8,18,11,18,12,18,158,3,18,161,8,18,1,19,1,19,1,19,1,20,4,20,167,
      8,20,11,20,12,20,168,1,21,4,21,172,8,21,11,21,12,21,173,1,21,1,21,
      1,22,3,22,179,8,22,1,22,1,22,4,22,183,8,22,11,22,12,22,184,1,23,1,
      23,1,24,1,24,1,24,1,24,5,24,193,8,24,10,24,12,24,196,9,24,1,24,1,24,
      0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
      13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
      24,49,25,1,0,9,1,0,48,57,1,0,45,45,1,0,46,46,1,0,35,35,5,0,45,45,48,
      57,65,90,92,92,97,122,2,0,9,9,32,32,2,0,33,33,42,42,2,0,34,34,92,92,
      3,0,34,34,40,41,92,92,209,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
      1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
      0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
      0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
      0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
      0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,61,1,0,0,0,7,68,1,0,0,0,9,
      70,1,0,0,0,11,72,1,0,0,0,13,80,1,0,0,0,15,86,1,0,0,0,17,91,1,0,0,0,
      19,101,1,0,0,0,21,107,1,0,0,0,23,113,1,0,0,0,25,122,1,0,0,0,27,127,
      1,0,0,0,29,129,1,0,0,0,31,134,1,0,0,0,33,137,1,0,0,0,35,140,1,0,0,
      0,37,147,1,0,0,0,39,162,1,0,0,0,41,166,1,0,0,0,43,171,1,0,0,0,45,182,
      1,0,0,0,47,186,1,0,0,0,49,188,1,0,0,0,51,52,5,58,0,0,52,2,1,0,0,0,
      53,54,5,105,0,0,54,55,5,110,0,0,55,56,5,99,0,0,56,57,5,108,0,0,57,
      58,5,117,0,0,58,59,5,100,0,0,59,60,5,101,0,0,60,4,1,0,0,0,61,62,5,
      111,0,0,62,63,5,112,0,0,63,64,5,116,0,0,64,65,5,105,0,0,65,66,5,111,
      0,0,66,67,5,110,0,0,67,6,1,0,0,0,68,69,5,35,0,0,69,8,1,0,0,0,70,71,
      5,59,0,0,71,10,1,0,0,0,72,73,5,98,0,0,73,74,5,97,0,0,74,75,5,108,0,
      0,75,76,5,97,0,0,76,77,5,110,0,0,77,78,5,99,0,0,78,79,5,101,0,0,79,
      12,1,0,0,0,80,81,5,99,0,0,81,82,5,108,0,0,82,83,5,111,0,0,83,84,5,
      115,0,0,84,85,5,101,0,0,85,14,1,0,0,0,86,87,5,111,0,0,87,88,5,112,
      0,0,88,89,5,101,0,0,89,90,5,110,0,0,90,16,1,0,0,0,91,92,5,99,0,0,92,
      93,5,111,0,0,93,94,5,109,0,0,94,95,5,109,0,0,95,96,5,111,0,0,96,97,
      5,100,0,0,97,98,5,105,0,0,98,99,5,116,0,0,99,100,5,121,0,0,100,18,
      1,0,0,0,101,102,5,112,0,0,102,103,5,114,0,0,103,104,5,105,0,0,104,
      105,5,99,0,0,105,106,5,101,0,0,106,20,1,0,0,0,107,108,5,101,0,0,108,
      109,5,118,0,0,109,110,5,101,0,0,110,111,5,110,0,0,111,112,5,116,0,
      0,112,22,1,0,0,0,113,114,5,100,0,0,114,115,5,111,0,0,115,116,5,99,
      0,0,116,117,5,117,0,0,117,118,5,109,0,0,118,119,5,101,0,0,119,120,
      5,110,0,0,120,121,5,116,0,0,121,24,1,0,0,0,122,123,5,110,0,0,123,124,
      5,111,0,0,124,125,5,116,0,0,125,126,5,101,0,0,126,26,1,0,0,0,127,128,
      7,0,0,0,128,28,1,0,0,0,129,130,3,27,13,0,130,131,3,27,13,0,131,132,
      3,27,13,0,132,133,3,27,13,0,133,30,1,0,0,0,134,135,3,27,13,0,135,136,
      3,27,13,0,136,32,1,0,0,0,137,138,3,27,13,0,138,139,3,27,13,0,139,34,
      1,0,0,0,140,141,3,29,14,0,141,142,7,1,0,0,142,143,3,31,15,0,143,144,
      7,1,0,0,144,145,3,33,16,0,145,36,1,0,0,0,146,148,7,1,0,0,147,146,1,
      0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,151,3,27,13,0,150,149,1,
      0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,160,1,0,
      0,0,154,156,7,2,0,0,155,157,3,27,13,0,156,155,1,0,0,0,157,158,1,0,
      0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,154,1,0,0,
      0,160,161,1,0,0,0,161,38,1,0,0,0,162,163,7,3,0,0,163,164,3,41,20,0,
      164,40,1,0,0,0,165,167,7,4,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,
      166,1,0,0,0,168,169,1,0,0,0,169,42,1,0,0,0,170,172,7,5,0,0,171,170,
      1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,175,1,
      0,0,0,175,176,6,21,0,0,176,44,1,0,0,0,177,179,5,13,0,0,178,177,1,0,
      0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,183,5,10,0,0,181,183,5,13,
      0,0,182,178,1,0,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,
      0,184,185,1,0,0,0,185,46,1,0,0,0,186,187,7,6,0,0,187,48,1,0,0,0,188,
      194,5,34,0,0,189,193,8,7,0,0,190,191,5,92,0,0,191,193,7,8,0,0,192,
      189,1,0,0,0,192,190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,
      1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,5,34,0,0,198,50,1,
      0,0,0,12,0,147,152,158,160,168,173,178,182,184,192,194,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}