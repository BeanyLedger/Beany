// Generated from Gringotts.g4 by ANTLR 4.10.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class GringottsLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.10.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_DIGIT = 12, TOKEN_YEAR = 13, TOKEN_MONTH = 14, 
    TOKEN_DAY = 15, TOKEN_DATE = 16, TOKEN_NUMBER = 17, TOKEN_TAG = 18, 
    TOKEN_WORD = 19, TOKEN_WHITESPACE = 20, TOKEN_NEWLINE = 21, TOKEN_TR_FLAG = 22, 
    TOKEN_INDENT = 23, TOKEN_STR = 24;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'DIGIT', 'YEAR', 'MONTH', 'DAY', 'DATE', 'NUMBER', 
    'TAG', 'WORD', 'WHITESPACE', 'NEWLINE', 'TR_FLAG', 'INDENT', 'STR'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'#'", "';'", "':'", "'balance'", "'close'", "'open'", "'commodity'", 
      "'price'", "'event'", "'document'", "'note'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, "DIGIT", "YEAR", "MONTH", "DAY", "DATE", "NUMBER", "TAG", "WORD", 
      "WHITESPACE", "NEWLINE", "TR_FLAG", "INDENT", "STR"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  GringottsLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'Gringotts.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,24,181,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
      1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
      5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
      1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
      10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
      1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,4,16,131,8,16,11,
      16,12,16,132,1,16,1,16,4,16,137,8,16,11,16,12,16,138,3,16,141,8,16,
      1,17,1,17,1,17,1,18,4,18,147,8,18,11,18,12,18,148,1,19,1,19,1,19,1,
      19,1,20,3,20,156,8,20,1,20,1,20,4,20,160,8,20,11,20,12,20,161,1,21,
      1,21,1,22,4,22,167,8,22,11,22,12,22,168,1,23,1,23,1,23,1,23,5,23,175,
      8,23,10,23,12,23,178,9,23,1,23,1,23,0,0,24,1,1,3,2,5,3,7,4,9,5,11,
      6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
      18,37,19,39,20,41,21,43,22,45,23,47,24,1,0,9,1,0,48,57,1,0,45,45,1,
      0,46,46,1,0,35,35,3,0,48,57,65,90,97,122,2,0,9,9,32,32,2,0,33,33,42,
      42,2,0,34,34,92,92,3,0,34,34,40,41,92,92,190,0,1,1,0,0,0,0,3,1,0,0,
      0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
      15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
      1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
      0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
      0,0,0,47,1,0,0,0,1,49,1,0,0,0,3,51,1,0,0,0,5,53,1,0,0,0,7,55,1,0,0,
      0,9,63,1,0,0,0,11,69,1,0,0,0,13,74,1,0,0,0,15,84,1,0,0,0,17,90,1,0,
      0,0,19,96,1,0,0,0,21,105,1,0,0,0,23,110,1,0,0,0,25,112,1,0,0,0,27,
      117,1,0,0,0,29,120,1,0,0,0,31,123,1,0,0,0,33,130,1,0,0,0,35,142,1,
      0,0,0,37,146,1,0,0,0,39,150,1,0,0,0,41,159,1,0,0,0,43,163,1,0,0,0,
      45,166,1,0,0,0,47,170,1,0,0,0,49,50,5,35,0,0,50,2,1,0,0,0,51,52,5,
      59,0,0,52,4,1,0,0,0,53,54,5,58,0,0,54,6,1,0,0,0,55,56,5,98,0,0,56,
      57,5,97,0,0,57,58,5,108,0,0,58,59,5,97,0,0,59,60,5,110,0,0,60,61,5,
      99,0,0,61,62,5,101,0,0,62,8,1,0,0,0,63,64,5,99,0,0,64,65,5,108,0,0,
      65,66,5,111,0,0,66,67,5,115,0,0,67,68,5,101,0,0,68,10,1,0,0,0,69,70,
      5,111,0,0,70,71,5,112,0,0,71,72,5,101,0,0,72,73,5,110,0,0,73,12,1,
      0,0,0,74,75,5,99,0,0,75,76,5,111,0,0,76,77,5,109,0,0,77,78,5,109,0,
      0,78,79,5,111,0,0,79,80,5,100,0,0,80,81,5,105,0,0,81,82,5,116,0,0,
      82,83,5,121,0,0,83,14,1,0,0,0,84,85,5,112,0,0,85,86,5,114,0,0,86,87,
      5,105,0,0,87,88,5,99,0,0,88,89,5,101,0,0,89,16,1,0,0,0,90,91,5,101,
      0,0,91,92,5,118,0,0,92,93,5,101,0,0,93,94,5,110,0,0,94,95,5,116,0,
      0,95,18,1,0,0,0,96,97,5,100,0,0,97,98,5,111,0,0,98,99,5,99,0,0,99,
      100,5,117,0,0,100,101,5,109,0,0,101,102,5,101,0,0,102,103,5,110,0,
      0,103,104,5,116,0,0,104,20,1,0,0,0,105,106,5,110,0,0,106,107,5,111,
      0,0,107,108,5,116,0,0,108,109,5,101,0,0,109,22,1,0,0,0,110,111,7,0,
      0,0,111,24,1,0,0,0,112,113,3,23,11,0,113,114,3,23,11,0,114,115,3,23,
      11,0,115,116,3,23,11,0,116,26,1,0,0,0,117,118,3,23,11,0,118,119,3,
      23,11,0,119,28,1,0,0,0,120,121,3,23,11,0,121,122,3,23,11,0,122,30,
      1,0,0,0,123,124,3,25,12,0,124,125,7,1,0,0,125,126,3,27,13,0,126,127,
      7,1,0,0,127,128,3,29,14,0,128,32,1,0,0,0,129,131,3,23,11,0,130,129,
      1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,140,1,
      0,0,0,134,136,7,2,0,0,135,137,3,23,11,0,136,135,1,0,0,0,137,138,1,
      0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,134,1,0,
      0,0,140,141,1,0,0,0,141,34,1,0,0,0,142,143,7,3,0,0,143,144,3,37,18,
      0,144,36,1,0,0,0,145,147,7,4,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,
      146,1,0,0,0,148,149,1,0,0,0,149,38,1,0,0,0,150,151,7,5,0,0,151,152,
      1,0,0,0,152,153,6,19,0,0,153,40,1,0,0,0,154,156,5,13,0,0,155,154,1,
      0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,160,5,10,0,0,158,160,5,13,
      0,0,159,155,1,0,0,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,
      0,161,162,1,0,0,0,162,42,1,0,0,0,163,164,7,6,0,0,164,44,1,0,0,0,165,
      167,3,39,19,0,166,165,1,0,0,0,167,168,1,0,0,0,168,166,1,0,0,0,168,
      169,1,0,0,0,169,46,1,0,0,0,170,176,5,34,0,0,171,175,8,7,0,0,172,173,
      5,92,0,0,173,175,7,8,0,0,174,171,1,0,0,0,174,172,1,0,0,0,175,178,1,
      0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,
      0,0,179,180,5,34,0,0,180,48,1,0,0,0,11,0,132,138,140,148,155,159,161,
      168,174,176,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}